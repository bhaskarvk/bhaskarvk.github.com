<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Bhaskar Karambelkar&#39;s Blog</title>
    <link>/tags/vim/</link>
    <description>Recent content in Vim on Bhaskar Karambelkar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Bhaskar V. Karambelkar</copyright>
    <lastBuildDate>Thu, 14 Jun 2007 14:45:00 +0000</lastBuildDate>
    <atom:link href="/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>New Features in Vim 7</title>
      <link>/2007/06/new-features-in-vim-7/</link>
      <pubDate>Thu, 14 Jun 2007 14:45:00 +0000</pubDate>
      
      <guid>/2007/06/new-features-in-vim-7/</guid>
      <description>

&lt;p&gt;This is my first attempt to write a review of any kind, so please excuse any rookie mistakes. The entire review is written in EMACS&amp;hellip;just kidding. The review was written in Vim 7.0
and screen shots were captured using &lt;a href=&#34;http://freshmeat.net/projects/ksnapshot/&#34;&gt;ksnapshot&lt;/a&gt; and edited using &lt;a href=&#34;http://www.koffice.org/krita/&#34;&gt;krita&lt;/a&gt;. Normally putting up screen shots of Vim is a ridiculous idea, but many of the new features have visual components (like pop-ups etc), so screen shots seem appropriate here.&lt;/p&gt;

&lt;p&gt;If you have to ask what is &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;, then this review is not for you, as I am not going to explain what Vim is, rather this is an attempt to give a brief description of new features of Vim 7.0. So without further a do, let&amp;rsquo;s dive in to Vim 7.0.&lt;/p&gt;

&lt;p&gt;New Features at a glance&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getscript plugin&lt;/li&gt;
&lt;li&gt;spell check&lt;/li&gt;
&lt;li&gt;omni completion&lt;/li&gt;
&lt;li&gt;Tabs&lt;/li&gt;
&lt;li&gt;Undo branches&lt;/li&gt;
&lt;li&gt;Internal Grep&lt;/li&gt;
&lt;li&gt;Highlighting&lt;/li&gt;
&lt;li&gt;Other notable improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getscript-plugin&#34;&gt;getscript plugin&lt;/h2&gt;

&lt;p&gt;Scripts extend the functionality of Vim in many ways. &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim Official Site&lt;/a&gt; is the place where to get them, but until rel 7.0 there was no way of auto upgrading scripts to their latest version. That&amp;rsquo;s where the getscript plugin comes in handy. From within vim do &amp;lsquo;:GLVS&amp;rsquo; and the script will download the latest version of the plugins already installed in your &amp;lsquo;$HOME/.vim&amp;rsquo; directory. The script is not completely fool-proof and it requires some amount of preparation before it can get to work , but it is certainly step in the right direction.&lt;/p&gt;

&lt;h2 id=&#34;spell-check&#34;&gt;Spell Check&lt;/h2&gt;

&lt;p&gt;Vim releases prior to 7.0 did support spell checking through external programs, but was clumsy and slow. Vim 7.0 has built in spell checking. It works out of box for English, all that is required is to issue an command
&amp;lsquo;:setlocal spell spelllang=en_us&amp;rsquo;.
Al though of little use to programmers, this will come in handy for documentation (You do document your code don&amp;rsquo;t you).
Attached are a few screen shots to demonstrate Vim spell checking in action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spell checking in text mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/spell-text.jpg&#34; alt=&#34;vim spell checking in text mode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spell checking in gui mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/spell-gui.jpg&#34; alt=&#34;Vim spell checking in GUI mode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sadly spell check did not work correctly while editing this document (how ironic). It would highlight mistakes only between link tags &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and ignore the rest of the document. I had to rename the file with .txt extension to get spell check working. Also another annoyance is that if you are using a mouse to correct mistakes, you need to first left click on the misspelled word to move the cursor to that word, and then right click to activate the spelling menu, I would expect that right-clicking on a misspelled word should automatically move the cursor to it. Another option I couldn&amp;rsquo;t find in the GUI pop-up for spelling suggestions was the &amp;ldquo;change/ignore all&amp;rdquo;. I am sure the textmode working is much better.&lt;/p&gt;

&lt;h2 id=&#34;omni-complete&#34;&gt;Omni complete&lt;/h2&gt;

&lt;p&gt;Perhaps the most touted feature of all, initially called as intellisense, but renamed to omni complete due to trademark issues. This is a sort of smart complete primarily for programming/scripting languages.&lt;/p&gt;

&lt;p&gt;The following languages are supported out of box, and the feature is extensible so adding support for other languages is trivial.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;(X)HTML with CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The help pages on omni complete have detailed instructions on using this new feature. The key sequence to trigger omni complete is ^X^O (Control-X followed by Control-O).&lt;/p&gt;

&lt;p&gt;There are already plenty of plugins available at &lt;a href=&#34;http://www.vim.org/&#34;&gt;www.vim.org&lt;/a&gt; for other languages. &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=1213&#34;&gt;VJDE&lt;/a&gt; plugin adds IDE like functionality to Vim for editing Java/C/C++ code as well as add omni completion support for Java. &lt;a href=&#34;http://vim.sourceforge.net/scripts/script.php?script_id=1520&#34;&gt;cppomnicomplete&lt;/a&gt; adds omni complete support for C++. For XML it is possible to convert XML DTDs in to VIM XML data file, so that while editing an XML of that particular DTD, omni complete presents a list of only vaild elements/attributes as per the DTD.&lt;/p&gt;

&lt;p&gt;One thing I noticed is that the speed of completion varies, it was quite fast for /Java/HTML but slow for PHP and somewhere in between for C.&lt;/p&gt;

&lt;p&gt;Attached are a few screen shots of Omni Complete in action.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Omni Complete for C&lt;/th&gt;
&lt;th&gt;Omni Complete for html&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;/images/vim/omni-c-gui.jpg&#34; alt=&#34;omni complete for C&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/images/vim/omni-html-gui.jpg&#34; alt=&#34;omni complete for html&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Omni Complete for Java&lt;/td&gt;
&lt;td&gt;Omni Complete for php&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;/images/vim/omni-java-gui.jpg&#34; alt=&#34;omni complete for java&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/images/vim/omni-php-gui.jpg&#34; alt=&#34;omni complete for php&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;tabs&#34;&gt;Tabs&lt;/h2&gt;

&lt;p&gt;Another feature missing in Vim 6.x was tabs for editing multiple files. Although pre 7.0, Vim did support editing multiple files using the concept of buffers and vertical and horizontal splits, addition of tabs is welcome.This will definitely help in integrating Vim with other IDE environments such as Netbeans, Eclipse , Visual Studio etc.&lt;/p&gt;

&lt;p&gt;One great feature about Vim tabs is the ease of moving from one tab to another. Simply in normal mode, type &amp;lsquo;[n]gt&amp;rsquo; to move to the n&lt;sup&gt;th&lt;/sup&gt; tab. Also all commands that work on windows work on tabs with &amp;lsquo;tab&amp;rsquo; appended to them. e.g. &amp;lsquo;:tabnew&amp;rsquo; .&lt;/p&gt;

&lt;p&gt;Following is a screen shot for tabs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/tabs.jpg&#34; alt=&#34;tabs in action&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;undo-branches&#34;&gt;Undo Branches&lt;/h2&gt;

&lt;p&gt;This is an interesting concept, and could become very useful. Traditionally any application has a single Undo/Redo Stack, so after undoing a lot of work if you make new changes, all the redo stack is lost. Vim creates backups of undos at regular interval, so that you can recreate the file as it looked at last branch. The &amp;lsquo;:undolist&amp;rsquo; command shows all the undo branches.&lt;/p&gt;

&lt;p&gt;How ever there are times when I want to undo a select steps but retain some changes. e.g. I make 10 changes, and undo 5, after that I want changes 9 and 10 redone, it is currently not possible and would require some sort of merge feature found in version control systems.&lt;/p&gt;

&lt;h2 id=&#34;internal-grep&#34;&gt;Internal Grep&lt;/h2&gt;

&lt;p&gt;Vim 7.0 comes built-in with it&amp;rsquo;s own grep, combined with the solid support for regular expressions, this is a handy feature for windows users who don&amp;rsquo;t have access to external grep command. The internal grep command is invoked by &amp;lsquo;:vimgrep&amp;rsquo; and can recurse in to sub directories.&lt;/p&gt;

&lt;h2 id=&#34;highlighting&#34;&gt;Highlighting&lt;/h2&gt;

&lt;p&gt;When ever the cursor moves over any of the following characters &amp;lsquo;&amp;lt;{[(&amp;rsquo; it&amp;rsquo;s matching &amp;lsquo;&amp;gt;}])&amp;rsquo; is highlighted. However this depends on a command getting executed every time the cursor moves and may need to disabled on slow terminals.&lt;/p&gt;

&lt;p&gt;Also 2 more options &amp;lsquo;cursorline&amp;rsquo; and &amp;lsquo;cursorcolumn&amp;rsquo; have been added which enable highlighting of the line and column on which the cursor is present. Following is a screen shot with matching [] and cursorline enabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/cursor.jpg&#34; alt=&#34;cursorline highlight&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-notable-improvements&#34;&gt;Other notable improvements&lt;/h2&gt;

&lt;p&gt;Here is a list of other notable improvements. This list is by no means exhaustive, and a full detailed documentation can be found in Vim help. &amp;lsquo;:help version7&amp;rsquo; is your friend.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for printing multi-byte text&lt;/li&gt;
&lt;li&gt;MzScheme interpreter support&lt;/li&gt;
&lt;li&gt;Full 32 bit Unicode support&lt;/li&gt;
&lt;li&gt;Remote file explorer with netrw plugin&lt;/li&gt;
&lt;li&gt;Various New commands, vim scripting functions, search patterns&lt;/li&gt;
&lt;li&gt;Syntax and Indent files for many more file types.&lt;/li&gt;
&lt;li&gt;Lots and lots of improvements to existing functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion Vim 7.0 continues to build up on top of, what was an already solid 6.x series. I have been running 7.0 (alpha and beta) releases for a long time now and finally with release of 7.0 , it will surely replace all 6.x installation on all my boxes.&lt;/p&gt;

&lt;p&gt;The new features of Vim will help to embed it in bigger IDEs such as Netbeans, Eclipse, Sun Studio etc. Thus programmers can have best of both worlds, the power of Vim and convenience of an IDE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this review Vim 7.0 was compiled from source on a Linux box. The reason behind compiling from source was to enable every possible feature , as against using the binary release which has only a limited set of features enabled. Following was the options passed to the &amp;lsquo;configure&amp;rsquo; script.&lt;/p&gt;

&lt;p&gt;./configure &amp;ndash;prefix=/usr &amp;ndash;sysconfdir=/etc &amp;ndash;localstatedir=/var &amp;ndash;enable-perlinterp &amp;ndash;enable-pythoninterp &amp;ndash;enable-tclinterp &amp;ndash;enable-rubyinterp &amp;ndash;enable-cscope &amp;ndash;enable-multibyte &amp;ndash;enable-xim &amp;ndash;enable-fontset &amp;ndash;enable-gui=auto &amp;ndash;with-features=hugh&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>