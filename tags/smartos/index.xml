<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smartos on Bhaskar Karambelkar&#39;s Blog</title>
    <link>/tags/smartos/index.xml</link>
    <description>Recent content in Smartos on Bhaskar Karambelkar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Â© 2007-2017 Bhaskar V. Karambelkar. All rights reserved.</copyright>
    <atom:link href="/tags/smartos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Shiny in a SmartOS zone</title>
      <link>/2015/10/shiny-in-a-smartos-zone/</link>
      <pubDate>Sat, 24 Oct 2015 20:22:02 -0400</pubDate>
      
      <guid>/2015/10/shiny-in-a-smartos-zone/</guid>
      <description>&lt;p&gt;My Last &lt;a href=&#34;/2015/10/setting-up-r-on-a-smartos-zone./&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; showed you how to install R inside a &lt;a href=&#34;http://www.smartos.org&#34; target=&#34;_blank&#34;&gt;SmartOS&lt;/a&gt; zone. This post is about installing the &lt;a href=&#34;https://www.rstudio.com/products/shiny/shiny-server/&#34; target=&#34;_blank&#34;&gt;shiny server&lt;/a&gt; in the said zone. While setting up R was relatively straight forward, for setting up Shiny server I had to patch some C++ code to make shiny server work on solaris. Which means you don&amp;rsquo;t have to, just follow along.
&lt;/p&gt;

&lt;p&gt;First install R in a zone as shown in my earlier &lt;a href=&#34;/2015/10/setting-up-r-on-a-smartos-zone./&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;. This is very important, unless you have a working R setup you cannot have a functional working Shiny server. Also make sure to allocate enough CPU, memory, and disk-space for your zone.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install some packages
pkgin install git-base
# Install Shiny R package
Rscript -e &amp;quot;install.packages(c(&#39;shiny&#39;))&amp;quot;
# Next install the shiny server
mkdir /opt/src &amp;amp;&amp;amp; cd /opt/src
git clone https://github.com/rstudio/shiny-server.git
cd shiny-server/
# We need a patch for some solaris specific stuff
wget https://gist.githubusercontent.com/bhaskarvk/6a15083ab9a7997df0a2/raw/5e7fec0dee4c79b828032ab007bf8b6137f735c3/solaris.diff
git apply solaris.diff &amp;amp;&amp;amp; rm solaris.diff
mkdir tmp
cd tmp
DIR=`pwd`
PATH=$DIR/../bin:$PATH
PYTHON=`which PYTHON`
PYTHON=`which python`
cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DPYTHON=&amp;quot;$PYTHON&amp;quot; ../
make
mkdir ../build
(cd .. &amp;amp;&amp;amp; ./bin/npm --python=&amp;quot;$PYTHON&amp;quot; rebuild)
(cd .. &amp;amp;&amp;amp; ./bin/node ./ext/node/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js --python=&amp;quot;$PYTHON&amp;quot; rebuild)
# Install the software at the predefined location
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This completes installation of shiny server. Next some post installation stuff&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s /usr/local/shiny-server/bin/shiny-server /usr/local/bin
useradd -m shiny
mkdir -p /var/log/shiny-server
mkdir -p /srv/shiny-server
mkdir -p /var/lib/shiny-server
chown shiny: /var/log/shiny-server /srv/shiny-server /var/lib/shiny-server
mkdir -p /etc/shiny-server
cd /etc/shiny-server
wget https://raw.githubusercontent.com/rstudio/shiny-server/master/config/default.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, Shiny is installed and configured. To start it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# We run the shiny server as user shiny
su - shiny
shiny-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2015-10-25 01:49:43.019] [INFO] shiny-server - Shiny Server v1.4.1.0 (Node.js v0.10.40)
[2015-10-25 01:49:43.021] [INFO] shiny-server - Using config file &amp;quot;/etc/shiny-server/shiny-server.conf&amp;quot;
[2015-10-25 01:49:43.064] [INFO] shiny-server - Starting listener on 0.0.0.0:3838
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations you now have a running shiny server inside a SmartOS zone. The shiny server installation instructions came from the &lt;a href=&#34;https://github.com/rstudio/shiny-server/wiki/Building-Shiny-Server-from-Source&#34; target=&#34;_blank&#34;&gt;official docs&lt;/a&gt;, but I did have to patch some stuff to make it work under solaris. The patch is available on &lt;a href=&#34;https://gist.github.com/bhaskarvk/6a15083ab9a7997df0a2&#34; target=&#34;_blank&#34;&gt;gist&lt;/a&gt;. Next I&amp;rsquo;ll try and create a proper start-up script for shiny-server so that it can be controlled via &lt;code&gt;svcadm&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up R on a SmartOS Zone.</title>
      <link>/2015/10/setting-up-r-on-a-smartos-zone./</link>
      <pubDate>Sat, 24 Oct 2015 18:49:00 +0000</pubDate>
      
      <guid>/2015/10/setting-up-r-on-a-smartos-zone./</guid>
      <description>&lt;p&gt;Recently I converted a spare beefy laptop (8 cores, 16 GB RAM, 750GB HD) to a &lt;a href=&#34;http://www.smartos.org&#34; target=&#34;_blank&#34;&gt;SmartOS&lt;/a&gt; hypervisor. I wanted to play with some bare metal hypervisor / container stuff and ESXi was just not cutting it. I&amp;rsquo;m not a Solaris nerd, but I know enough Unix to find may way around in Linux/*BSDs/Solaris/HP-UX, so it was not a big pain. In fact ZFS is really nice.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Anyway, this post is about setting up R in a &lt;a href=&#34;https://wiki.smartos.org/display/DOC/Zones&#34; target=&#34;_blank&#34;&gt;zone&lt;/a&gt;. It wasn&amp;rsquo;t very difficult to set up R in a zone but it was not completely straight forward as well.&lt;/p&gt;

&lt;p&gt;On the SmartOS host&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Update the list of available images
imgadm update
# import the latest base-64 image (15.3.0)
imgadm import 842e6fa6-6e9b-11e5-8402-1b490459e334
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next create a file &lt;code&gt;zone.json&lt;/code&gt; with the following content in a convenient place.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;alias&amp;quot;: &amp;quot;zone01&amp;quot;,
  &amp;quot;hostname&amp;quot;: &amp;quot;zone01&amp;quot;,
  &amp;quot;brand&amp;quot;: &amp;quot;joyent&amp;quot;,
  &amp;quot;quota&amp;quot;: 10,
  &amp;quot;max_physical_memory&amp;quot;: 2048,
  &amp;quot;dataset_uuid&amp;quot;: &amp;quot;842e6fa6-6e9b-11e5-8402-1b490459e334&amp;quot;,
  &amp;quot;default_gateway&amp;quot;: &amp;quot;10.0.0.1&amp;quot;,
  &amp;quot;resolvers&amp;quot;: [
    &amp;quot;8.8.8.8&amp;quot;,
    &amp;quot;8.8.4.4&amp;quot;
  ],
  &amp;quot;nics&amp;quot;: [
    {
      &amp;quot;nic_tag&amp;quot;: &amp;quot;stub0&amp;quot;,
      &amp;quot;ip&amp;quot;: &amp;quot;10.0.0.5&amp;quot;,
      &amp;quot;netmask&amp;quot;: &amp;quot;255.255.255.0&amp;quot;,
      &amp;quot;allow_ip_spoofing&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;gateway&amp;quot;: &amp;quot;10.0.0.1&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You&amp;rsquo;ll probably need to change the &lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;quota&lt;/code&gt; (disk-space in GB), &lt;code&gt;max_physical_memory&lt;/code&gt;, and networking stuff like &lt;code&gt;gateway&lt;/code&gt; and &lt;code&gt;nics&lt;/code&gt; to match your environment. I had problems running the zone with 1G memory, better give it at least 2 Gigs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Provision and bring up the zone
vcadm create -f zone.json
zlogin &amp;lt;UUID of the new zone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now inside the zone&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkgin update # Update pkgsrc
# Compiler and related stuff
# I had a hard time compiling R packages with gcc48/gcc49 so
# I used gcc47 which worked perfectly.
pkgin install gcc47 gcc47-libs gmake autoconf automake cmake
# XML stuff
pkgin install libxml2 libxml libxml++1 libxml++-2
pkgin install R R2pkg
# Setup CRAN Mirror
# TODO may be https instead of http
echo &#39;options(repos=structure(c(CRAN=&amp;quot;http://cran.rstudio.com/&amp;quot;)))&#39; &amp;gt; ~/.Rprofile
# Install Rcpp and devtools, this will pull in a lot of goodies with it
Rscript -e &amp;quot;install.packages(&#39;Rcpp&#39;,&#39;devtools&#39;)&amp;quot;
# Install Hadleyverse
Rscript -e &amp;quot;install.packages(c(&#39;plyr&#39;, &#39;dplyr&#39;, &#39;stringr&#39;, &#39;rvest&#39;, &#39;httr&#39;, &#39;reshape2&#39;, &#39;ggplot2&#39;, &#39;ggmap&#39;, &#39;tidyr&#39;, &#39;lubridate&#39;, &#39;readr&#39;, &#39;testthat&#39;, &#39;roxygen2&#39;))&amp;quot;
# Some other useful R package
Rscript -e &amp;quot;install.packages(c(&#39;data.table&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that it&amp;rsquo;s your usual R stuff. I&amp;rsquo;m going to convert this zone to a shiny server and will blog about it when done.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>