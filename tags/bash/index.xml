<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Bhaskar Karambelkar&#39;s Blog</title>
    <link>/tags/bash/index.xml</link>
    <description>Recent content in Bash on Bhaskar Karambelkar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Â© 2007-2017 Bhaskar V. Karambelkar. All rights reserved.</copyright>
    <atom:link href="/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bash Shell Tricks</title>
      <link>/2007/06/bash-shell-tricks/</link>
      <pubDate>Tue, 12 Jun 2007 19:26:00 +0000</pubDate>
      
      <guid>/2007/06/bash-shell-tricks/</guid>
      <description>&lt;p&gt;Are you sure you are squeezing out all, that the bash shell can provide? Presented below are a few obscure things that bash can do, but chances are you may not have heard of them.
&lt;/p&gt;

&lt;h1 id=&#34;completion&#34;&gt;Completion&lt;/h1&gt;

&lt;p&gt;No I am not talking about completing command/file names. I am talking about completing arguments to various commands, completing filenames based on application. This is one of the touted features of
&amp;lsquo;zsh&amp;rsquo;, but unknown to many is the fact that it is also available in bash.
All you need to do is install &lt;a href=&#34;http://www.caliban.org/bash/index.shtml#completion&#34; target=&#34;_blank&#34;&gt;bash-completion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With bash completion installed you can use the &lt;code&gt;TAB&lt;/code&gt; key to complete arguments to common commands like &lt;code&gt;rpm, apt, find, grep&lt;/code&gt; etc. Also bash-completion will complete host-names
for &lt;code&gt;ssh, scp&lt;/code&gt;, by looking up hosts inside your &lt;code&gt;$HOME/.ssh/authorized_keys&lt;/code&gt; file. For &lt;code&gt;rpm&lt;/code&gt; based distros, bash-completion will even lookup package names already installed.&lt;/p&gt;

&lt;p&gt;The feature I find most handy is file-name completion based on the context of the command. e.g. if you type &lt;code&gt;tar -zxvf&lt;/code&gt; and then press the TAB key twice, you will get a list of only files ending in &lt;code&gt;.tar.gz or .tgz&lt;/code&gt; rather than a list of all files in the directory.&lt;/p&gt;

&lt;h1 id=&#34;socket-communication&#34;&gt;Socket Communication&lt;/h1&gt;

&lt;p&gt;I bet a lot of you haven&amp;rsquo;t heard of this, but bash can indeed perform basic socket communication via &lt;code&gt;/dev/tcp, /dev/udp&lt;/code&gt;. These are pseudo devices that bash uses to communicate with network sockets. In fact if you did &lt;code&gt;ls -l /dev/tcp /dev/udp&lt;/code&gt; you will get a &amp;lsquo;No such file or directory&amp;rsquo; error message.&lt;/p&gt;

&lt;p&gt;So how to use them, we below I present 2 examples.&lt;/p&gt;

&lt;p&gt;One to quickly check headers from a HTTP Server. Here is a simple function you can put in your &lt;code&gt;$HOME/.bashrc&lt;/code&gt; that will check for headers of HTTP server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;headers() {
  server=$1; port=${2:-80}
  exec 5&amp;lt;&amp;gt; /dev/tcp/$server/$port
  echo -e &amp;quot;HEAD / HTTP/1.0\nHost: ${server}\n\n&amp;quot; &amp;gt;&amp;amp;5;
  cat 0&amp;lt;&amp;amp;5;
  exec 5&amp;gt;&amp;amp;-
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply invoke it by&lt;/p&gt;

&lt;p&gt;&lt;code&gt;headers &amp;lt;servername or ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The port number defaults to 80 if not provided.&lt;/p&gt;

&lt;p&gt;Second example is a quick way to check if a port is open or not. You can always use netcat or telnet, but I find this easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;testPort() {
  server=$1; port=$2; proto=${3:-tcp}
  exec 5&amp;lt;&amp;gt;/dev/$proto/$server/$port
  (( $? == 0 )) &amp;amp;&amp;amp; exec 5&amp;lt;&amp;amp;-
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again invoke it by&lt;/p&gt;

&lt;p&gt;&lt;code&gt;testPort &amp;lt;servername or ip&amp;gt; &amp;lt;port&amp;gt; &amp;lt;protocol&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The protocol can be either tcp or udp and defaults to tcp.&lt;/p&gt;

&lt;h1 id=&#34;arithmetic-evaluations&#34;&gt;Arithmetic Evaluations&lt;/h1&gt;

&lt;p&gt;Bash can perform arithmetic evaluations. They are much easier to using &lt;code&gt;expr&lt;/code&gt; tool. Below are some examples.&lt;em&gt;Note the absense of $ prefix for variable names.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;((count++)) #increment value of variable &#39;count&#39; by one.
((total+=current)) # set total = total+current.
((current&amp;gt;max?max=current:max=max)) # ternary expression.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;other-neat-bash-tricks&#34;&gt;Other neat bash tricks&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^orig^repl^&lt;/code&gt; replace &amp;lsquo;orig&amp;rsquo; in previous command with &amp;lsquo;repl&amp;rsquo; and execute the new command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp filename{,.bak}&lt;/code&gt; Copy &amp;lsquo;filename&amp;rsquo; as &amp;lsquo;filename.bak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir -p dir{1,2,3}/subdir{1,2}&lt;/code&gt; Create &lt;code&gt;dir1/subdir1&lt;/code&gt;, &lt;code&gt;dir1/subdir2&lt;/code&gt;, &lt;code&gt;dir2/subdir1&lt;/code&gt;, &lt;code&gt;dir2/subdir2&lt;/code&gt;, &lt;code&gt;dir3/subdir1&lt;/code&gt;, and &lt;code&gt;dir3/subdir2&lt;/code&gt; directories&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>