<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bhaskar Karambelkar&#39;s Blog</title>
    <link>/tags/leaflet/index.xml</link>
    <description>Recent content on Bhaskar Karambelkar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Bhaskar V. Karambelkar</copyright>
    <atom:link href="/tags/leaflet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Leaflet Diary: Chapter 3, Making Leaflet Extensible</title>
      <link>/2016/10/leaflet-diary-chapter-3-making-leaflet-extensible/</link>
      <pubDate>Mon, 17 Oct 2016 22:00:00 -0400</pubDate>
      
      <guid>/2016/10/leaflet-diary-chapter-3-making-leaflet-extensible/</guid>
      <description>

&lt;p&gt;This is the fourth blog entry in my series &amp;lsquo;&lt;a href=&#34;/2016/09/leaflet-diary-prologue/&#34;&gt;Leaflet-Diary&lt;/a&gt;&amp;rsquo;. In my last post &lt;a href=&#34;/2016/10/leaflet-diary-chapter-2-projections-and-then-some/&#34;&gt;Chapter 2: Projections and then some&lt;/a&gt;, I talked projections, easy button support and upgrading leaflet to 0.7.7.
This one is about phase III, making the Leaflet package extensible and allowing for users to integrate many more &lt;a href=&#34;https://leafletjs.com/plugins&#34;&gt;Leaflet plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-version&#34;&gt;TL;DR Version&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Some bugs were squashed.&lt;/li&gt;
&lt;li&gt;Leaflet package is now extensible. You can write your own R package that augment core leaflet functionality by incorporating various &lt;a href=&#34;http://leafletjs.com/plugins&#34;&gt;plugins&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new R package &lt;a href=&#34;https://www.github.com/bhaskarvk/leaflet.extras&#34;&gt;leaflet.extras&lt;/a&gt; has been created to extend the leaflet package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;detailed-version&#34;&gt;Detailed Version&lt;/h2&gt;

&lt;h3 id=&#34;making-leaflet-extensible&#34;&gt;Making Leaflet extensible&lt;/h3&gt;

&lt;p&gt;One of the strengths of the leaflet javascript library is the plugins eco-system it supports, and it is not fair to the R community to not be able to take advantage of this. The leaflet R package already integrates some plugins, but there are literally hundreds of plugins. It is not feasible to incorporate all of them in the R package. However with the work that went into this phase it is now possible to extend the leaflet package and incorporate as many plugins as you want. Most of the work went into opening up some of internal functions of the leaflet package as well as tidying them up a bit.&lt;/p&gt;

&lt;h3 id=&#34;leaflet-extras&#34;&gt;Leaflet.extras&lt;/h3&gt;

&lt;p&gt;I created a new R package &lt;a href=&#34;https://www.github.com/bhaskarvk/leaflet.extras&#34;&gt;leaflet.extras&lt;/a&gt; where I have integrated more plugins and continue to do so. This will be the future direction for the leaflet package, the core package will only see bug fixes, performance improvements etc. and any new plugins will be developed in external packages.&lt;/p&gt;

&lt;h2 id=&#34;end-of-phase-3&#34;&gt;End of Phase 3&lt;/h2&gt;

&lt;p&gt;This marks the end of Phase 3 in my leaflet development. If you like what you see or have comments/questions/critiques don&amp;rsquo;t hesitate to contact me via &lt;a href=&#34;https://twitter.com/bhaskar_vk&#34;&gt;Twitter&lt;/a&gt; or open an issue over at &lt;a href=&#34;https://github.com/rstudio/leaflet/issues&#34;&gt;Github&lt;/a&gt;. In the mean time happy mapping.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaflet Diary: Chapter 2, Projections and then some</title>
      <link>/2016/10/leaflet-diary-chapter-2-projections-and-then-some/</link>
      <pubDate>Mon, 10 Oct 2016 21:00:00 -0400</pubDate>
      
      <guid>/2016/10/leaflet-diary-chapter-2-projections-and-then-some/</guid>
      <description>

&lt;p&gt;This is the third blog entry in my series &amp;lsquo;&lt;a href=&#34;/2016/09/leaflet-diary-prologue/&#34;&gt;Leaflet-Diary&lt;/a&gt;&amp;rsquo;. In my last post &lt;a href=&#34;/2016/09/leaflet-diary-chapter-1-plugins-galore/&#34;&gt;Chapter 1: Plugins galore&lt;/a&gt;, I talked about upgrading existing plugins and adding any missing functionality to those plugins.
This one is about phase II, where I&amp;rsquo;ve added two extremely powerful features, custom projection support and custom buttons/toolbars and also upgraded Leaflet JS to 0.7.7.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-version&#34;&gt;TL;DR Version&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Leaflet Javascript has been upgraded from 0.7.3 to 0.7.7, which is the latest release on the 0.7.x branch.&lt;/li&gt;
&lt;li&gt;Support for adding custom buttons/toolbars using the &lt;a href=&#34;https://github.com/CliffCloud/Leaflet.EasyButton/&#34;&gt;Leaflet.EasyButton&lt;/a&gt; plugin.&lt;/li&gt;
&lt;li&gt;Support for custom projections using &lt;a href=&#34;https://github.com/kartena/Proj4Leaflet/&#34;&gt;Proj4Leaflet&lt;/a&gt; plugin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try out the new stuff today by building the Leaflet package from source using &lt;code&gt;devtools::install_github(&#39;rstudio/leaflet&#39;)&lt;/code&gt;. For a full list of changes see the &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/298&#34;&gt;pull request #298&lt;/a&gt;. Also the &lt;a href=&#34;https://github.com/rstudio/leaflet/tree/master/inst/examples&#34;&gt;examples&lt;/a&gt; folder has lots of new examples. You can see working sample code at my &lt;a href=&#34;http://rpubs.com/bhaskarvk/&#34;&gt;Rpubs&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;detailed-version&#34;&gt;Detailed Version&lt;/h2&gt;

&lt;h3 id=&#34;leaflet-0-7-7&#34;&gt;Leaflet 0.7.7&lt;/h3&gt;

&lt;p&gt;The Leaflet Javascript included with the package was ver. &lt;a href=&#34;https://github.com/Leaflet/Leaflet/releases/tag/v0.7.3&#34;&gt;0.7.3&lt;/a&gt; released on May, 23rd 2014. A lot has happened since then. The 0.7 branch latest version is now &lt;a href=&#34;https://github.com/Leaflet/Leaflet/releases/tag/v0.7.7&#34;&gt;0.7.7&lt;/a&gt;, and now leaflet js is at ver &lt;a href=&#34;https://github.com/Leaflet/Leaflet/releases/tag/v1.0.1&#34;&gt;1.0.1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leaflet 1.x is a major version upgrade, which has some backward compatibility issues with 0.7.x branch. So instead of jumping straight to 1.x I decided to first upgrade to 0.7.7. This ensures compatibility with existing code but yet gives us all the benefits of the latest release. The 0.7.7 upgrade was part of commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/298/commits/3f4720aa4ef1b3ec8b5ecd75c3294b5d756312e9&#34;&gt;3f4720a&lt;/a&gt;, and while I was at it I also upgraded jQuery from 1.11.1 to 1.12.4.&lt;/p&gt;

&lt;h3 id=&#34;custom-buttons-and-toolbars&#34;&gt;Custom Buttons and Toolbars&lt;/h3&gt;

&lt;p&gt;There are quite a few plugins listed on the leaflet site for &lt;a href=&#34;http://leafletjs.com/plugins#user-interface&#34;&gt;user interface&lt;/a&gt; add-ons. So it was a bit intimidating deciding which plugin to adopt for allowing users to define some custom buttons/toolbars. Finally I settled on the &lt;a href=&#34;https://github.com/CliffCloud/Leaflet.EasyButton/&#34;&gt;Leaflet.EasyButton&lt;/a&gt; plugin as it allows maximum flexibility in terms of adding your own buttons and toolbars and defining your own actions for them.&lt;/p&gt;

&lt;p&gt;To give a small example, here is a code that allows you to reset the map view to &lt;code&gt;[0, 0, 0]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(leaflet)
leaflet() %&amp;gt;% addTiles() %&amp;gt;%
	addEasyButton(easyButton(
    	icon = &#39;ion-arrow-shrink&#39;,
    	title = &#39;Reset View&#39;,
    	onClick = JS(&amp;quot;
    		function(btn, map){ map.setView([0,0],0); }&amp;quot;)
  	)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a lot more you can do with the EasyButtons plugins, and you can check out more examples at my &lt;a href=&#34;http://rpubs.com/bhaskarvk/easybutton&#34;&gt;Rpubs: EasyButtons&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&#34;projections&#34;&gt;Projections&lt;/h3&gt;

&lt;p&gt;I now come to one of the most important features added to the leaflet package, projections support. If you are unsure about what projections are, I suggest staring from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Map_projection&#34;&gt;Wikipedia entry&lt;/a&gt; on the subject, and there is always the &lt;a href=&#34;https://xkcd.com/977/&#34;&gt;XKCD Comic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The projections support comes courtesy of the &lt;a href=&#34;https://github.com/kartena/Proj4Leaflet&#34;&gt;Proj4Leaflet&lt;/a&gt;  plugin which provides the glue between leaflet and &lt;a href=&#34;https://github.com/proj4js/proj4js&#34;&gt;Proj4JS&lt;/a&gt;. With this addition you can now specify custom projections in your leaflet maps. Adding projections support to the leaflet package was more of a technical challenge than anything else, but with help from &lt;a href=&#34;https://twitter.com/TimSalabim3&#34;&gt;Tim Salabim&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mdsumner&#34;&gt;Michael Summer&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/timelyportfolio&#34;&gt;Kent Russel&lt;/a&gt;, and Rstudio&amp;rsquo;s very own &lt;a href=&#34;https://twitter.com/jcheng&#34;&gt;Joe Cheng&lt;/a&gt; we finally had success. Once the technical aspect was sorted out the challenge was making the R API straightforward and as idiomatic as possible, here again Joe&amp;rsquo;s experience was very helpful. This was truly a team effort. I got a lot of feedback and pointers from the R and GIS community both on Twitter and Github as I was baking in support for projections, which allowed me to solidify the code quite a bit.&lt;/p&gt;

&lt;p&gt;I have quite a few examples for using custom projections on my Rpubs pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/bhaskarvk/proj4leaflet&#34;&gt;Proj4Leaflet Demo&lt;/a&gt;: This is a good starting point.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/bhaskarvk/epsg-28992&#34;&gt;Tiles with projections&lt;/a&gt;: Shows you how to use non spherical mercator tiles.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-polarmaps&#34;&gt;Polar Maps&lt;/a&gt;: Shows how to use leaflet for Arctic and Antarctic regions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a nice view of Antarctica in it&amp;rsquo;s native &lt;a href=&#34;http://spatialreference.org/ref/epsg/wgs-84-antarctic-polar-stereographic/&#34;&gt;EPSG:3031&lt;/a&gt; projection.
&lt;img src=&#34;http://i.imgur.com/igDUoKy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Projections are a somewhat advanced concept and most web mapping users will not really need them. You should be mostly fine with the default &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Mercator&#34;&gt;spherical mercator&lt;/a&gt; projection. Before using projections be sure to read this &lt;a href=&#34;https://github.com/bhaskarvk/leaflet/issues/16#issuecomment-249369147&#34;&gt;note&lt;/a&gt; where I have discussed some inner working of the projections support and some limitations.&lt;/p&gt;

&lt;h2 id=&#34;end-of-phase-2&#34;&gt;End of Phase 2&lt;/h2&gt;

&lt;p&gt;This marks the end of Phase 2 in my leaflet development. In next phase I&amp;rsquo;ll show you how you can augment the leaflet package by developing your own plugins and some examples that I have been working on.
If you like what you see or have comments/questions/critiques don&amp;rsquo;t hesitate to contact me via &lt;a href=&#34;https://twitter.com/bhaskar_vk&#34;&gt;Twitter&lt;/a&gt; or open an issue over at &lt;a href=&#34;https://github.com/rstudio/leaflet/issues&#34;&gt;Github&lt;/a&gt;. In the mean time happy mapping.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaflet Diary: Chapter 1, Plugins Galore</title>
      <link>/2016/09/leaflet-diary-chapter-1-plugins-galore/</link>
      <pubDate>Mon, 19 Sep 2016 21:00:00 -0400</pubDate>
      
      <guid>/2016/09/leaflet-diary-chapter-1-plugins-galore/</guid>
      <description>

&lt;p&gt;This is the second blog entry in my series &amp;lsquo;Leaflet-Diary&amp;rsquo;, the &lt;a href=&#34;../leaflet-diary-prologue/&#34;&gt;first entry&lt;/a&gt; was nothing more than me announcing to the world that I&amp;rsquo;m contracting with &lt;a href=&#34;http://www.rstudio.com&#34;&gt;RStudio&lt;/a&gt; for adding new features to the &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;Leaflet&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;This one is about what has been done so far and what&amp;rsquo;s cooking. My plan of attack was, before adding any new features or fixing any bugs upgrade the Leaflet javascript library and existing plugins to their respective latest stable versions. The reasoning being, Leaflet javascript (henceforth LeafletJS) in the current R package is version 0.7.3. The current stable version of LeafletJS is 0.7.7. (LeafletJS 1.0 is not yet production ready.) The 0.7.7 version has seen a lot of fixes and performance improvements over 0.7.3, not to mention 0.7.3 was released way back in &lt;a href=&#34;https://github.com/Leaflet/Leaflet/releases/tag/v0.7.3&#34;&gt;May, 23 2014&lt;/a&gt;. Similarly the various plugins that were bundled with the R package (see below) were also quite old and their respective current stable versions have seen similar performance and feature improvements. So it made sense to bring everything in the R package up to date. And that is exactly what I&amp;rsquo;ve been doing for the last 2 weeks (including weekends).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve broken down my task in two phases, phase 1: upgrade plugins (now complete) and phase 2: upgrade LeafletJS (in progress). The reason I upgraded the plugins before LeafletJS was simply because I was more familiar with the plugin handling code than the core Leaflet code. There was a risk of some upgraded plugins not working under 0.7.3 and requiring 0.7.7, but I was willing to take that risk.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-version&#34;&gt;TL;DR Version&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All existing plugins have been upgraded to their respective latest versions.&lt;/li&gt;
&lt;li&gt;R counterparts to any missing or new features of these plugins have also been added.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve introduced additional functionality in some plugins not available before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try out the new stuff today by building the Leaflet package from source using &lt;code&gt;devtools::install_github(&#39;rstudio/leaflet&#39;)&lt;/code&gt;. For a full list of changes see the &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293&#34;&gt;pull request #293&lt;/a&gt;. Also the &lt;a href=&#34;https://github.com/rstudio/leaflet/tree/master/inst/examples&#34;&gt;examples&lt;/a&gt; folder has lots of new examples. You can see working sample code at my &lt;a href=&#34;http://rpubs.com/bhaskarvk/&#34;&gt;Rpubs&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;detailed-version&#34;&gt;Detailed Version&lt;/h2&gt;

&lt;h3 id=&#34;leaflet-providers-plugin&#34;&gt;Leaflet Providers Plugin&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/leaflet-extras/leaflet-providers&#34;&gt;Leaflet Providers&lt;/a&gt; plugin, which provides a convenient way to add existing free tile providers has been upgraded (See commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/bcd9adf459727a88fa04a29d5c348ca4a3db8efe&#34;&gt;bcd9adf&lt;/a&gt; for details). Of noteworthy, was the removal of MapQuest provider (Issue &lt;a href=&#34;https://github.com/leaflet-extras/leaflet-providers/issues/219&#34;&gt;#219&lt;/a&gt;) due to MapQuest closing free access. After upgrading this plugin I saw a chance to improve the R part. Instead of having to provide the provider name in the &lt;code&gt;addProviderTiles&lt;/code&gt; call, I created a R list called &lt;code&gt;providers&lt;/code&gt; pre-populated with Names of existing providers and base-map variants if any.&lt;/p&gt;

&lt;p&gt;So now instead of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;leaflet() %&amp;gt;% addProviderTiles(&amp;quot;Stamen.Toner&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can do&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;leaflet() %&amp;gt;% addProviderTiles(providers$Stamen.Toner)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first this looks like more typing, but a) you can put RStudio&amp;rsquo;s auto-complete to work for you and, b) you don&amp;rsquo;t have to remember all the providers and their variants, and there are roughly 110 of them (I checked). For a complete example of this along with code see my &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-providers&#34;&gt;Rpubs: leaflet-providers&lt;/a&gt; entry.&lt;/p&gt;

&lt;h3 id=&#34;leaflet-label-plugin&#34;&gt;Leaflet.Label Plugin&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Leaflet/Leaflet.label&#34;&gt;Leaflet.Label&lt;/a&gt; plugin allows you to add static or on-hover labels to your markers, polylines, and polygons. This plugin was upgraded to the latest version (See commits &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/ca2f5a593d7183387eb06fa3b056b6a66ecaef02&#34;&gt;ca2f5a5&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/8b5dd82d4b7519fce798e17d507b34a8a6561107&#34;&gt;8bddd82&lt;/a&gt;). In addition I also merged two pull requests on the original plugin repo and introduced some new features of my own. Now with the new version you get&amp;hellip;&lt;/p&gt;

&lt;table border=&#34;0&#34;&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;image src=&#34;http://i.imgur.com/HgMzgkt.png&#34;/&gt;
             &lt;br/&gt;Label&#39;s w/o box.
        &lt;/td&gt;
        &lt;td&gt;
            &lt;image src=&#34;http://i.imgur.com/lQBFnOl.png&#34;/&gt;
            &lt;br/&gt;Customizable text size.
        &lt;/td&gt;
        &lt;td rowspan=&#34;2&#34;&gt;
            &lt;image src=&#34;http://i.imgur.com/H6yVmHv.png&#34;/&gt;
            &lt;br/&gt;Directional Labels.
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;image src=&#34;http://i.imgur.com/2OaHN2R.png&#34;/&gt;
            &lt;br/&gt;Stylized labels.
            
        &lt;/td&gt;
        &lt;td&gt;
            &lt;image src=&#34;http://i.imgur.com/htDjAtW.png&#34;/&gt;
            &lt;br/&gt;Markers w/o the icon.
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;I believe these new features make the plugin even more useful for your interactive mapping needs. See this &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-labels&#34;&gt;Rpubs: Leaflet-Label&lt;/a&gt; entry for details and code samples.&lt;/p&gt;

&lt;h3 id=&#34;leaflet-omnivore-plugin&#34;&gt;Leaflet-Omnivore Plugin&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mapbox/leaflet-omnivore&#34;&gt;Leaflet-Omnivore&lt;/a&gt; plugin by &lt;a href=&#34;http://www.mapbox.com&#34;&gt;Mapbox&lt;/a&gt; allows you to overlay GeoJSON, TopoJSON, WKT, KML, GPX files on the Leaflet map. I have upgraded this plugin to the latest version (See commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/5abd3f4bfefedd476421f0f7a473537c6ec3eefd&#34;&gt;5abd3f4&lt;/a&gt;). I didn&amp;rsquo;t see much changed w.r.t. the older plugin, but staying current is always a better option. For now even if the plugin is upgraded I haven&amp;rsquo;t yet added the R API to add WKT/KML/GPX files. There is a need to support these file formats in the R package via more idiomatic R APIs. The current approach to add GeoJSON/TopoJSON is also not the most ideal one. So stay tuned for more updates on this.&lt;/p&gt;

&lt;p&gt;For what it&amp;rsquo;s worth do check out my example of handling GeoJSON using the &lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt; package over at &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-geojson&#34;&gt;Rpubs: leaflet-geojson&lt;/a&gt;. I like this approach more than the omnivore plugin based approach because it&amp;rsquo;s much easy to add markers/polylines/polygons and style them using data with this approach than  leaflet native approach.&lt;/p&gt;

&lt;h3 id=&#34;leaflet-measure-plugin&#34;&gt;Leaflet Measure Plugin&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/ljagis/leaflet-measure&#34;&gt;Leaflet Measure&lt;/a&gt; is a very useful plugin that enables you to add a controller on your map which can be used to measure distances between points or areas of a polygon. I upgraded it to the latest version (See commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/c58926f7a2fc8e93abdd5393a1e1feba42666932&#34;&gt;c58926f&lt;/a&gt;). The new version supports localization in certain locales, which goes nicely with OpenStreetMaps (OSM) base-map layer which uses localized labels.
e.g. below you see the plugin displaying the options and text in German.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://i.imgur.com/VD5RU42.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;For details see my &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-measure&#34;&gt;Rpubs: leaflet-measure&lt;/a&gt; entry.&lt;/p&gt;

&lt;h3 id=&#34;minimap-plugin&#34;&gt;MiniMap Plugin&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Norkart/Leaflet-MiniMap&#34;&gt;Minimap plugin&lt;/a&gt; was by far the most fun and most challenging to work on. I had implemented a rudimentary example of it a while ago, but it had a fixed base-map. What I wanted was an ability to sync the mini-map&amp;rsquo;s tile layer with the base-map&amp;rsquo;s. And there&amp;rsquo;s a restriction in LeafletJS in that no two map&amp;rsquo;s can share layers. Finally I was able to achieve it albeit using some native Javascript code. And solving that problem also allowed me to solve another interesting use case of showing markers in both base-map and mini-map. See commits &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/8eb9daaa5a9b4ea1f16f1510f6d9cefdb78f01ae&#34;&gt;8eb9daa&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/d5250ca3f7190457d9f6b2e67ddc9721371838cd&#34;&gt;d5250ca&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/f392477238406a837f4a3b2c540a283a114de309&#34;&gt;f3924772&lt;/a&gt;
Here&amp;rsquo;s a sample of what can be done now.&lt;br/&gt;&lt;br/&gt;
&lt;image src=&#34;http://i.imgur.com/AXUKIdk.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;For a full list of possibilities check out my &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-minimap&#34;&gt;Rpubs: Minimap&lt;/a&gt; entry.&lt;/p&gt;

&lt;h3 id=&#34;simple-graticule-graticule-plugins&#34;&gt;Simple-Graticule &amp;amp; Graticule Plugins&lt;/h3&gt;

&lt;p&gt;I had implemented the &lt;a href=&#34;https://github.com/ablakey/Leaflet.SimpleGraticule&#34;&gt;Simple Graticule&lt;/a&gt; plugin, but when I did upgrade it this time, I realized that it is meant only for &lt;a href=&#34;http://leafletjs.com/examples/crs-simple/crs-simple.html&#34;&gt;L.CRS.Simple&lt;/a&gt;, but there is a proper &lt;a href=&#34;https://github.com/turban/Leaflet.Graticule&#34;&gt;Graticule&lt;/a&gt; plugin too, so I included it in this round too. See commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/727dd479baa174d57c7072dcdac4b29017538ad1&#34;&gt;727dd47&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-graticule&#34;&gt;Rpubs: Graticule&lt;/a&gt; and &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-simplegraticule&#34;&gt;Rpubs: Simple Graticule&lt;/a&gt; entries for code samples.&lt;/p&gt;

&lt;h3 id=&#34;marker-clusters-plugin&#34;&gt;Marker Clusters Plugin&lt;/h3&gt;

&lt;p&gt;Finally we come to my favorite of all, the &lt;a href=&#34;https://github.com/Leaflet/Leaflet.markercluster&#34;&gt;Marker Cluster&lt;/a&gt; plugin. This plugin was way overdue for an upgrade and I found two very useful sub-plugins, the &lt;a href=&#34;https://github.com/ghybs/Leaflet.MarkerCluster.LayerSupport&#34;&gt;layer support&lt;/a&gt; sub-plugin &amp;amp; the &lt;a href=&#34;https://github.com/ghybs/Leaflet.MarkerCluster.Freezable&#34;&gt;freezable&lt;/a&gt; sub-plugin. The former makes marker clustering work along with layers and layer-controllers, so you can add your markers to different layers and show/hide these layers using a layer controller and the marker cluster plugin will update it&amp;rsquo;s clusters accordingly. The later allows you to freeze/unfreeze clustering at a specific zoom level. I believe these were worth additions to what is an already very useful plugin. For the code curious see commit &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/293/commits/b6c980d5ade6729af0f4e7712397a114cb8dd30d&#34;&gt;b6c980&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For code samples and some spiffy clustering check out the &lt;a href=&#34;http://rpubs.com/bhaskarvk/leaflet-marker-clusterming&#34;&gt;Rpubs: Marker Cluster&lt;/a&gt; entry.&lt;/p&gt;

&lt;h2 id=&#34;end-of-phase-1&#34;&gt;End of Phase 1&lt;/h2&gt;

&lt;p&gt;This concludes my two weeks of development. For most part the coding was grunt work and involved taking what has already been built in Javascript and making it available in R. The challenge was to make the new stuff available in as idiomatic way as possible to R. I did have to scratch my head a few times, especially with the mini-map syncing with base-map examples. In addition to these changes, I have also added two new plugins but they are not merged in the code base yet. More on them in the next post. If you like what you see or have comments/questions/critiques don&amp;rsquo;t hesitate to contact me via &lt;a href=&#34;https://twitter.com/bhaskar_vk&#34;&gt;Twitter&lt;/a&gt; or open an issue over at &lt;a href=&#34;https://github.com/rstudio/leaflet/issues&#34;&gt;Github&lt;/a&gt;. In the mean time happy mapping.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaflet Diary: Prologue</title>
      <link>/2016/09/leaflet-diary-prologue/</link>
      <pubDate>Sat, 10 Sep 2016 16:44:02 -0400</pubDate>
      
      <guid>/2016/09/leaflet-diary-prologue/</guid>
      <description>

&lt;p&gt;Sometime in Sep./Oct. 2015 I was working on a research effort that required building some web and print maps. Not a whole lot of GIS analysis but simply plotting some data on map for better representation. I had joined the project mid-way and the first editions of the maps were screen shots of Google Maps&lt;sup&gt;TM&lt;/sup&gt;. Needless to say the were aesthetically hideous and not interactive. So I set about to find a better alternative to mapping and stumbled on &lt;a href=&#34;https://www.github.com/rstudio/leaflet&#34;&gt;leaflet&lt;/a&gt; for R by &lt;a href=&#34;http://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt;. This looked perfect for getting started. I had not much GIS know-how but it was well documented and so I started using it.&lt;/p&gt;

&lt;p&gt;As I progressed I noticed that the original javascript library &lt;a href=&#34;http://www.leafletjs.com&#34;&gt;leaflet&lt;/a&gt; provided a lot of &lt;a href=&#34;http://leafletjs.com/plugins&#34;&gt;plugins&lt;/a&gt; but most of them were not available in the R package. So this was a challenge, and being a good open-source netizen I proceeded to adding support for some plugins in the R package. This resulted in two pull requests (PRs) on the leaflet repo &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/181&#34;&gt;PR-181&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/rstudio/leaflet/pull/184&#34;&gt;PR-184&lt;/a&gt;, which I&amp;rsquo;m happy to say were accepted and merged into the master branch.&lt;/p&gt;

&lt;p&gt;Fast forward 9 months, and I&amp;rsquo;m happy to announce that I am officially contracting with RStudio to add even more features to the leaflet package. I&amp;rsquo;ll be blogging about my coding adventures under &amp;lsquo;Leaflet Diary&amp;rsquo; series on this blog post. In each subsequent blog post I&amp;rsquo;ll add my progress as well as thoughts on features/performance of the changes going in. You can track my changes at &lt;a href=&#34;https://www.github.com/bhaskarvk&#34;&gt;my fork&lt;/a&gt; of the package.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;series-posts&#34;&gt;Series Posts&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;2016-09-19 &lt;a href=&#34;../leaflet-diary-chapter-1-plugins-galore/&#34;&gt;Chapter 1: Plugins Galore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2016-10-10 &lt;a href=&#34;/2016/10/leaflet-diary-chapter-2-projections-and-then-some/&#34;&gt;Chapter 2: Projections and then some&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2016-10-19 &lt;a href=&#34;/2016/10/leaflet-diary-chapter-3-making-leaflet-extensible/&#34;&gt;Chapter 3: Making Leaflet extensible&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Re-plotting Russian AirStrikes In Syria</title>
      <link>/2015/11/re-plotting-russian-airstrikes-in-syria/</link>
      <pubDate>Tue, 10 Nov 2015 11:56:30 -0500</pubDate>
      
      <guid>/2015/11/re-plotting-russian-airstrikes-in-syria/</guid>
      <description>

&lt;p&gt;My Cartography mentor &lt;a href=&#34;https://twitter.com/hrbrmstr&#34;&gt;Bob Rudis&lt;/a&gt; pointed me to a blog post visualizing &lt;a href=&#34;http://r-datameister.blogspot.com/2015/11/plotting-russian-airstrikes-in-syria.html&#34;&gt;Russian Air Strikes in Syria&lt;/a&gt; and commanded me to redo the static maps to something more interactive and easier to explore.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr-version&#34;&gt;TL;DR Version&lt;/h2&gt;

&lt;p&gt;Interactive Map at &lt;a href=&#34;http://rpubs.com/bhaskarvk/russian-airstrikes-in-syria&#34;&gt;Rpubs&lt;/a&gt; created using Leaflet after scraping data using RSelenium+ PhantomJS + dplyr. You can use the LayerSelector at the Top Right to toggle various Base Tiles. Clicking on any Marker will show details about that Air Strike.&lt;/p&gt;

&lt;h2 id=&#34;data-acquisition&#34;&gt;Data Acquisition&lt;/h2&gt;

&lt;p&gt;The data comes from crowdsourcing of Russian Ministry of Defense&amp;rsquo;s (MOD) Youtube&lt;sup&gt;TM&lt;/sup&gt; channel. The process and the data is described &lt;a href=&#34;https://www.bellingcat.com/news/mena/2015/10/26/what-russias-own-videos-and-maps-reveal-about-who-they-are-bombing-in-syria/&#34;&gt;here&lt;/a&gt; and the data can be found at &lt;a href=&#34;http://russia-strikes-syria.silk.co/&#34;&gt;http://russia-strikes-syria.silk.co/&lt;/a&gt;. The argument is that a majority of the strikes claimed by the Russian MOD to be targeting ISIS held areas are actually targeting non-ISIS rebel areas and as such helping the Asaad regime more than fighting ISIS.&lt;/p&gt;

&lt;p&gt;The original visualization was done by copying the data and putting it in an excel spreadsheet and then mapped using R&amp;rsquo;s &lt;code&gt;ggmap&lt;/code&gt; package. But in the interest of reproducibility I wanted to scrape the data directly from within R. For this I initially tried using &lt;a href=&#34;https://cran.r-project.org/web/packages/rvest/&#34;&gt;rvest&lt;/a&gt; but quickly realized that this was a no go as the table containing the data was dynamically populated using AJAX/Javascript stuff. So I had to turn to RSelenium + PhantomJS as described &lt;a href=&#34;https://cran.r-project.org/web/packages/RSelenium/vignettes/RSelenium-headless.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is the web-scraping code, and the webpage from where this data was scraped can be found &lt;a href=&#34;http://russia-strikes-syria.silk.co/explore/table/collection/strike-id/column/date-uploaded/column/time-in-utc-uploaded/column/accuracy-of-russian-location/column/actual-location-co-ords/column/closest-location-governorate/column/claimed-location/column/claimed-targets/column/closest-location-actual/column/status/column/isis-in-the-area/column/error-type/column/notes/column/checkdesk-link/column/video-url/slice/0/1000&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RSelenium)
library(rvest)

pJS &amp;lt;- phantom()
Sys.sleep(5) # give the binary a moment
remDr &amp;lt;- remoteDriver(browserName = &#39;phantomjs&#39;)
remDr$open()
remDr$navigate(&#39;http://russia-strikes-syria.silk.co/explore/table/collection/strike-id/column/date-uploaded/column/time-in-utc-uploaded/column/accuracy-of-russian-location/column/actual-location-co-ords/column/closest-location-governorate/column/claimed-location/column/claimed-targets/column/closest-location-actual/column/status/column/isis-in-the-area/column/error-type/column/notes/column/checkdesk-link/column/video-url/slice/0/1000&#39;)
Sys.sleep(2) # Some time for page to load
events &amp;lt;- read_html(remDr$getPageSource()[[1]]) %&amp;gt;%
  html_node(xpath= &#39;//*[@id=&amp;quot;canvas&amp;quot;]/div/div[3]/div[2]/div[2]/div[4]/table&#39;) %&amp;gt;%
  html_table()
remDr$close()
pJS$stop() # close the PhantomJS process

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
In short the code starts a RSelenium + PhantomJS WebDriver fetches the webpage containing the data. Then the html table is parsed using rvest&amp;rsquo;s &lt;code&gt;html_table()&lt;/code&gt; after the correct table is selected using the proper xpath to the table.&lt;/p&gt;

&lt;h2 id=&#34;data-preparation&#34;&gt;Data Preparation&lt;/h2&gt;

&lt;p&gt;To plot the data correctly I need to perform the following steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Filter out data containing invalid Lat/Long coordinates.&lt;/li&gt;
&lt;li&gt;Split the single column containing Lat/Long in to two columns.&lt;/li&gt;
&lt;li&gt;Create a new column to be used for Popup Display when a point is clicked on the map.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; are more than capable of doing all this using some basic simple steps shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(tidyr)

events %&amp;gt;% filter(str_detect(`Actual location co-ords`,
                             &#39;[0-9]+\\.[0-9]+, *[0-9]+\\.[0-9]+&#39;)) %&amp;gt;%
  separate(`Actual location co-ords`,c(&#39;lat&#39;,&#39;lon&#39;),
           sep = &#39;,&#39;, convert = TRUE, remove = TRUE ) %&amp;gt;%
  mutate(popup = sprintf(&#39;&amp;lt;P&amp;gt;&amp;lt;center&amp;gt;&amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Status:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Date Uploaded:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s %s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Claimed Location:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Claimed Targets:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Closest Governorate:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Closest Actual Location:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;ISIS Presence:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Error:&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Notes:&amp;lt;/i&amp;gt; %s&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Description:&amp;lt;/i&amp;gt; &amp;lt;a href=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/a&amp;gt; / &amp;lt;i&amp;gt;Video:&amp;lt;/i&amp;gt; &amp;lt;a href=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/P&amp;gt;&#39;,
                         Airstrikes, Status,
                         `Date (Uploaded)`, `Time in UTC (Uploaded)`,
                         `Claimed location`, `Claimed targets`,
                          `Closest location governorate`, `Closest location (actual)`,
                         `ISIS in the area?`, `Error type`,
                         Notes, `Checkdesk link`, Airstrikes,
                         `Video URL`, Airstrikes
                         )) -&amp;gt; events
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function filters out all data points which don&amp;rsquo;t match the regex for the the Lat/Long format. The &lt;code&gt;separate&lt;/code&gt; function splits the &amp;lsquo;Actual location co-ords&amp;rsquo; column in to two columns lat and lon. And finally the &lt;code&gt;mutate&lt;/code&gt; function is used to create the HTML code that will be used to display the popup when this datapoint is clicked on the Map.&lt;/p&gt;

&lt;h2 id=&#34;data-plotting&#34;&gt;Data Plotting&lt;/h2&gt;

&lt;p&gt;Finally for Data Plotting I used &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;Leaflet for R&lt;/a&gt; library. You will need to build the library from source as I use some new features in the library that haven&amp;rsquo;t yet made it to CRAN. You can do this using &lt;code&gt;devetool::install_github(&#39;rstudio/leaflet&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Map consists of following elements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple Base Tile Maps out of which only one can be active at any given time.&lt;/li&gt;
&lt;li&gt;A GeoJSON for plotting the various Administrative areas of Syria superimposed on the base map.&lt;/li&gt;
&lt;li&gt;Markers for the Air Strikes.&lt;/li&gt;
&lt;li&gt;A Layer Selection option.&lt;/li&gt;
&lt;li&gt;A mini map to know the global context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also needed a way to visually distinguish between VERIFIED and FALSE strikes. Verified being strikes that claimed to have targeted ISIS and actually targeted ISIS or actually have targeted non-ISIS areas and not claimed to have targeted ISIS in short those where the claim and actual targets tally, and FALSE being the ones where there was a discrepancy in either the claimed and actual target or claimed and actual location. I chose to use Blue colored Markers for VERIFIED and Red colored for FALSE.&lt;/p&gt;

&lt;p&gt;The code for plotting is shown below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(leaflet)

if(!file.exists(&#39;./cities.json&#39;) {
	# Syrian Cities GeoJSON downloaded from 
	# http://crisis.net/projects/syria-tracker/cities.json
	# More Info @ http://blog.crisis.net/choropleth-maps-with-d3/
	download.file(url=&#39;http://crisis.net/projects/syria-tracker/cities.json&#39;, destfile=&#39;cities.json&#39;)
}
cities &amp;lt;- readLines(&#39;./cities.json&#39;, warn =F) %&amp;gt;% paste(collapse=&#39;\n&#39;)

# Leaflet Map + Various Base Tiles
events %&amp;gt;% leaflet() %&amp;gt;%
  addTiles(group=&amp;quot;Default&amp;quot;) %&amp;gt;%
  addProviderTiles(&#39;CartoDB.PositronNoLabels&#39;,group=&#39;Blank-Canvas&#39;) %&amp;gt;%
  addProviderTiles(&#39;OpenStreetMap.BlackAndWhite&#39;, group=&amp;quot;OSM-BlackNWhite&amp;quot;) %&amp;gt;%
  addProviderTiles(&#39;MapQuestOpen.OSM&#39;, group=&#39;MapQuest&#39;) %&amp;gt;%
  addProviderTiles(&#39;Stamen.TonerLite&#39;, group=&#39;Stamen-Light&#39;) %&amp;gt;%
  addProviderTiles(&#39;Esri.WorldStreetMap&#39;,group=&#39;Esri-1&#39;) %&amp;gt;%
  addProviderTiles(&#39;Esri.DeLorme&#39;,group=&#39;Esri-2&#39;) %&amp;gt;%
  addProviderTiles(&#39;Esri.OceanBasemap&#39;,group=&#39;Esri-3&#39;) %&amp;gt;%
  addProviderTiles(&#39;Esri.NatGeoWorldMap&#39;,group=&#39;NatGeo&#39;) %&amp;gt;%
  addProviderTiles(&#39;CartoDB.Positron&#39;,group=&#39;CartoDB-1&#39;) %&amp;gt;%
  addProviderTiles(&#39;CartoDB.PositronNoLabels&#39;,group=&#39;CartoDB-2&#39;) %&amp;gt;%
  addProviderTiles(&#39;Stamen.TonerHybrid&#39;,group=&#39;CartoDB-2&#39;) %&amp;gt;%
  addProviderTiles(&#39;Stamen.TonerLines&#39;,group=&#39;CartoDB-2&#39;) %&amp;gt;%
  addProviderTiles(&#39;CartoDB.DarkMatter&#39;,group=&#39;CartoDB-3&#39;) %&amp;gt;%
  addProviderTiles(&#39;CartoDB.DarkMatterNoLabels&#39;,group=&#39;CartoDB-4&#39;) %&amp;gt;%
  addProviderTiles(&#39;Acetate.basemap&#39;,group=&#39;Acetate&#39;) %&amp;gt;%
  addProviderTiles(&#39;Stamen.TonerLabels&#39;,group=&#39;Acetate&#39;) -&amp;gt; eventMap

# Awesome Icons with color depending on Status
icon &amp;lt;- awesomeIcons(icon = &#39;crosshairs&#39;,
                     markerColor = ifelse(events$Status == &#39;VERIFIED&#39;,&#39;blue&#39;,&#39;red&#39;),
                     library = &#39;fa&#39;,
                     iconColor = &#39;black&#39;)

# Add Markers for AirStrikes and GeoJSON for Syrian Regions                     
eventMap %&amp;gt;%
  addAwesomeMarkers(
    lat=~lat, lng=~lon,
    label = ~Airstrikes, icon=icon,
    group = &#39;Air Strikes&#39;,
    popup = ~popup
  ) %&amp;gt;%
  addGeoJSON(cities, weight = 0.7, color = &amp;quot;#00FF00&amp;quot;,
             stroke=T, fill = F, fillOpacity = 0.1,
             group=&#39;Syria Regions&#39;) -&amp;gt; eventMap

# Add a Layer Control for toggling Layers/BaseMaps
eventMap  %&amp;gt;%  addLayersControl(
  baseGroups = c(&#39;Default&#39;,
                 &#39;Blank-Canvas&#39;,
                 &#39;OSM-BlackNWhite&#39;,
                 &#39;MapQuest&#39;,
                 &#39;Stamen-Light&#39;,
                 &#39;Esri-1&#39;,
                 &#39;Esri-2&#39;,
                 &#39;Esri-3&#39;,
                 &#39;NatGeo&#39;,
                 &#39;CartoDB-1&#39;,
                 &#39;CartoDB-2&#39;,
                 &#39;CartoDB-3&#39;,
                 &#39;CartoDB-4&#39;,
                 &#39;Acetate&#39;),
  overlayGroups = c(&amp;quot;Air Strikes&amp;quot;, &amp;quot;Syria Regions&amp;quot;),
  options = layersControlOptions(collapsed = TRUE)
) -&amp;gt; eventMap

# Finally Add a Minimap and render the Map
eventMap %&amp;gt;% addMiniMap()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
And the final map is shown below. This is just a screenshot you can find an interactive version of this at &lt;a href=&#34;http://rpubs.com/bhaskarvk/russian-airstrikes-in-syria&#34;&gt;Rpubs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/Syria.png&#34; alt=&#34;Russian Air Strikes in Syria&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For Web Scraping dynamic data RSelinium + PhantomJS makes a killer combo.&lt;/li&gt;
&lt;li&gt;R&amp;rsquo;s leaflet library allows for easy creation of interactive maps.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>